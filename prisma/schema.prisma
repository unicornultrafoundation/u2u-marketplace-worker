generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email         String?          @unique
  username      String?          @unique
  signature     String?          @unique
  signedMessage String?
  signer        String           @unique
  publicKey     String?
  signDate      DateTime?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  avatar        String?
  id            String           @id @default(uuid()) @db.Uuid
  acceptedTerms Boolean          @default(false)
  discordLink   String?
  facebookLink  String?
  telegramLink  String?
  twitterLink   String?
  webURL        String?
  coverImage    String?
  bio           String?
  shortLink     String?          @unique
  nftCreator    NFT[]
  nftCollection UserCollection[]
  nftsOwnership UserNFT[]
}

model NFT {
  id             String     @db.VarChar(255)
  name           String
  ipfsHash       String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  status         TX_STATUS
  tokenUri       String
  txCreationHash String     @unique
  creatorId      String     @db.Uuid
  collectionId   String     @db.Uuid
  imageHash      String?
  collection     Collection @relation(fields: [collectionId], references: [id])
  creator        User       @relation(fields: [creatorId], references: [id])
  Trait          Trait[]
  UserNFT        UserNFT[]

  @@id([id, collectionId])
}

model UserNFT {
  userId       String @db.Uuid
  nftId        String @db.VarChar(255)
  quantity     Int    @default(1)
  collectionId String @db.Uuid
  NFT          NFT    @relation(fields: [nftId, collectionId], references: [id, collectionId])
  user         User   @relation(fields: [userId], references: [id])

  @@id([userId, nftId])
}

model Collection {
  id             String           @id @default(uuid()) @db.Uuid
  txCreationHash String           @unique
  name           String           @unique
  symbol         String           @unique
  description    String?
  status         TX_STATUS
  type           CONTRACT_TYPE
  categoryId     Int?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  address        String?          @unique
  shortUrl       String           @unique
  metadata       String?
  coverImage     String?
  category       Category?        @relation(fields: [categoryId], references: [id])
  nfts           NFT[]
  creators       UserCollection[]
}

model UserCollection {
  userId       String     @db.Uuid
  collectionId String     @db.Uuid
  collection   Collection @relation(fields: [collectionId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@id([userId, collectionId])
}

model Category {
  id         Int          @id @default(autoincrement())
  name       String
  collection Collection[]
}

model Trait {
  id           String  @id @default(uuid()) @db.Uuid
  value        String
  nftId        String
  display_type String?
  trait_type   String
  collectionId String  @db.Uuid
  NFT          NFT     @relation(fields: [nftId, collectionId], references: [id, collectionId])
}

enum TX_STATUS {
  PENDING
  SUCCESS
  FAILED
}

enum CONTRACT_TYPE {
  ERC1155
  ERC721
}
